% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/looming_animation.R
\name{looming_animation}
\alias{looming_animation}
\title{Create a looming animation}
\usage{
looming_animation(x, ...)
}
\arguments{
\item{x}{list. A list object of class \code{constant_speed_model},
\code{variable_speed_model}, or \code{diameter_model}.}

\item{correction}{numeric. Correction factor for the display used to play the
animation. Default = 0.0285. Typically falls between 0.01-0.06. Exact value
can be determined using \code{\link{looming_animation_calib}}}

\item{width}{integer. Width resolution of the display. E.g. for a display set
at 1080p resolution (1920x1080), this is \code{width = 1920}. Note: this is
NOT the native resolution, but the display resolution as set in the
operating system settings. Visit \url{https://whatismyscreenresolution.com}
on the playback display to check.}

\item{height}{integer. Height resolution of the display. E.g. for a display
set at 1080p resolution (1920x1080), this is \code{height = 1080}. Note:
this is NOT the native resolution, but the display resolution as set in the
operating system settings. Visit \url{https://whatismyscreenresolution.com}
on the playback display to check.}

\item{fill}{string. Colour of the circle.}

\item{background}{string. Colour of the background.}

\item{pad}{numeric. Duration in seconds to pad the start of the video. This
replicates the first frame of the animation the required number of times to
create this duration. Essentially, it makes the animation static for
\code{pad} number of seconds before it starts playing (but see
\code{pad_blank}).}

\item{pad_blank}{logical. Optionally pad with blank frames rather than the
first animation frame.}

\item{dots}{logical. Controls if frame tracking dots are added to animation
frames (see Details).}

\item{dots_interval}{numeric. Interval in frames from first animation frame
when dots are added.}

\item{dots_colour}{string. Colour of dots}

\item{dots_position}{string. Corner in which to display dots: \code{tr},
\code{tl}, \code{br}, \code{bl}, indicating top right, top left, bottom
right, or bottom left.}

\item{dots_size}{numeric. Size of added dots. Default = 0.005.}

\item{frame_number}{logical. Controls if frame numbers are added to animation
frames (see Details).}

\item{frame_number_colour}{string. Colour of frame numbers}

\item{frame_number_position}{string. Corner in which to display frame
numbers: \code{tr}, \code{tl}, \code{br}, \code{bl}, indicating top right,
top left, bottom right, or bottom left.}

\item{frame_number_size}{numeric. Size of frame numbers as proportion of
default plotting text size. Default = 2.}

\item{frame_number_rotation}{numeric. Value in degrees (0-360) to rotate
frame numbers.}

\item{start_marker}{logical. Controls if a marker ("X") is added to the first
frame. This is a visual aid: if it disappears it indicates the video is
playing.}

\item{start_marker_colour}{logical. Colour of the \code{start_marker}}

\item{start_marker_size}{logical. Size of the \code{start_marker} as
proportion of default plotting text size. Default = 2.}

\item{save_data}{logical. If \code{=TRUE}, exports to the current working
directory a \code{.csv} file containing the data used to make the
animation, including the column of values scaled using the
\code{correction} value. File name: \code{ANIM_from_**name of R object
used**_**frame rate**_**display resolution**.csv}}
}
\description{
\code{looming_animation} creates a movie file (\code{.mp4}) of a
  circle increasing in size to simulate an object (e.g. an attacking
  predator) coming towards a target. The function input must be an object
  created in either \code{\link{constant_speed_model}},
  \code{\link{variable_speed_model}}, or \code{\link{diameter_model}} which
  is where the parameters determining the size and speed of the simulation
  are entered. It requires \code{ffmpeg} (\url{http://ffmpeg.org}), an
  external, cross-platform, command line utility for encoding video, to be
  installed on your system.
}
\details{
IMPORTANT: The function works by saving an image file
  (\code{loom_img_0000001.png} etc.) for every frame of the animation to the
  current working directory. It then uses \code{ffmpeg} to encode these
  images to an \code{.mp4} file (saved as \code{animation.mp4}). It then
  deletes (actually deletes, not just sent to the trash) the \code{.png}
  files from the working directory. It will overwrite any \code{.png} or
  \code{.mp4} file it encounters which has an identical name. It's
  recommended you create a new directory (i.e. folder) for each animation,
  and use \code{setwd()} to set this as the current working directory before
  running the function. If you want to save an animation, move it or rename
  it before running the function again or it will get overwritten. It has not
  been rigorously tested on older systems with slow read-write speeds to the
  hard drive, which may cause unknown problems. Please provide feedback if
  you encounter any issues.

  The function is capable of controlling precise details of how the object is
  displayed on screen. For example the \code{correction} operator ensures the
  hypothesised size in the model is displayed at that exact size on a
  specific display at a specific resolution. These details are important in
  experiments where the time in the animation at which an escape response
  occurs (and hence the perceived distance and/or speed of the attacker) are
  of interest. If you simply want to generate an animation to elicit a
  response and are unconcerned with these details, you can ignore most of
  these options. For simple models where these details are unimportant see
  \code{\link{diameter_model}}.

  Note animations should end with a filled screen, because even small objects
  at viewing distances approaching zero approach infinite perceived size (the
  exception is if you have used \code{\link{diameter_model}} and set the end
  diameter to less than the size of your screen). The final animation may
  have several completely filled frames at the end, depending on the
  \code{attacker_diameter} as set in \code{constant_speed_model} or
  \code{variable_speed_model}. Obviously, an object above a certain diameter
  cannot be displayed on a screen smaller than that diameter. If your
  attacker is larger in diameter than the screen, the final stages of the
  animation cannot physically display the actual perceived size as it gets
  close to the subject. In these cases, the animation essentially continues
  past the point where it can display the entirety of the simulation, and
  shows a filled screen (of the chosen \code{fill} colour) for however many
  frames are left in the simulation beyond that point. In most cases, if
  using biologically realistic parameters, this will be only a few frames.
}
\section{Screen display and playback considerations}{
 The function creates a
  video at the frame rate (\code{anim_frame_rate}) specified in the
  \code{\link{constant_speed_model}}, \code{\link{variable_speed_model}} or
  \code{\link{diameter_model}} object. The frame rate should be one the
  playback software handles correctly. Most modern displays have a maximum
  refresh rate of 60 Hz, so videos at frame rates higher than this may not be
  displayed correctly. I recommend using either 30 or 60 frames per second
  (Hz) which is a frame rate most video playback software should honour
  without problems. The output video is of a circle increasing in diameter
  over time, as specified in the \code{$model$diam_on_screen} component of
  the model.

  The display resolution of the screen you will use to play the animation
  should be entered as \code{width} and \code{height}. NOTE - This is the
  current DISPLAY resolution, which is not necessarily the native resolution
  of the screen, but determined in the Displays preferences of your operating
  system. If you are unsure, visit \url{https://whatismyscreenresolution.com}
  on the device. These settings ensure the animation is in the correct aspect
  ratio and uses the full screen (although you are free to modify the aspect
  ratio if, for example, you want your animation to be square). Other
  resolution values *should* still produce the correct widths onscreen,
  however I cannot guarantee all playback software will honour this, so best
  to follow the above guidelines if these details are important in your
  experiment.

  An object of a hypothetical size may be displayed at a different size on a
  different screen, due to differences in resolution or the physical size of
  the pixels that make up the screen. The \code{correction} operator is
  intended to be a display-specific correction factor to ensure the actual,
  physical size of the circle matches the diameters in the
  \code{$model$diam_on_screen} component of the model. This value can be
  determined using the \code{\link{looming_animation_calib}} function. See
  the documentation for this function for instructions on its use. If
  creating different animations, the \code{correction} value will be the same
  for a particular screen as long as the display resolution remains the same.
}

\section{Animation options}{
 The circle colour and background can be specified
  using \code{fill} and \code{background} with standard base-R colour syntax
  as used in graphics functions such as \code{plot()} etc.

  In your experiment you may want to identify the particular frame of the
  animation at which an event such as an escape response occurs. There are
  two ways of marking the animation so the frame can be identified in video
  recordings of the experiment:

  \subsection{Frame numbers}{ The animation frame number can be placed in
  every frame using \code{frame_number = TRUE}. The colour, size, and corner
  of the screen to place the number can be specified (see \code{Arguments}).
  In addition, the orientation can be set with \code{frame_number_rotation}.
  } \subsection{Dots}{ If \code{dots = TRUE}, starting from the first
  animation frame a small dot is placed in the corner of the frame at the
  frame interval specified with \code{dots_interval}. It is also placed in
  the last frame, regardless of the \code{dots_interval}. Again, colour, size
  and corner can be specified (see \code{Arguments}). }

  These markers are only inserted into animation frames, not to frames added
  for padding (see next section).

  \subsection{Start Marker}{ By default (\code{start_marker = TRUE}), a
  marker (an "X") is placed at the bottom centre of the screen in the first
  frame of the video, regardless of padding. This is a visual aid to allow
  you to see when the video has started to play: if it is not there, then the
  video has started playing. This is especially useful for videos that have
  been padded, and those without frame markers, as there may be no other
  indication the video is playing. The colour and size of the marker can be
  specified with \code{start_marker_colour} and \code{start_marker_size}.}
}

\section{Padding animations to a required duration}{
 The video file can be
  extended to a required total duration using the \code{pad} option. This
  value is a duration in seconds added to the start of the animation before
  playback. It duplicates the starting frame of the animation the required
  number of times to achieve the padding duration. Essentially, this makes
  the animation static for \code{pad} seconds before it starts to play.
  Depending on the \code{start_distance} set in \code{constant_speed_model},
  this means the video may show a static circle until the animation starts.
  If you do not want this, either modify the \code{start_distance} until the
  initial diameter is negligible, or use the \code{pad_blank = TRUE} option,
  in which case blank frames will be added rather than duplicating the
  starting frame. Under this option, after \code{pad} seconds of blank
  screen, the animation will suddenly appear and play. Again, how noticable
  this is depends on the starting diameter as determined with
  \code{start_distance} in \code{constant_speed_model}. Note that frame
  tracking markers (i.e. dots or frame numbers) will only be added to
  animation frames, not to frames added for padding.

  NOTE: Be careful with padding options. Padding the video with extra frames
  will increase the time it takes for the function to run. Finalise your
  animation options and parameters before padding it. If you need a long
  duration video, be aware that every frame png file generated is around
  40-50KB. Adding 10 minutes (600s) of padding to a video at 60 Hz will mean
  600*60 = 36000 extra frames generated. At ~45KB each this would require
  ~1.6GB of hard drive space, and require considerable time to process! Due
  to compression, the resulting video file should however be only a few MB in
  size.
}

\section{Compatibility}{
 The function should work with both Windows and macOS
  (Linux coming soon), however it requires \code{ffmpeg}
  (\url{http://ffmpeg.org}), an external, cross-platform, command line
  utility for encoding video, to be installed on your system. For
  installation instructions see
  \url{http://adaptivesamples.com/how-to-install-ffmpeg-on-windows/} (may
  need to restart) or
  \url{https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/wiki/Installing-ffmpeg-on-Mac-OS-oX}






  On Windows, if you encounter an error after installation (e.g. \code{unable
  to start png() device}), try setting the working directory with
  \code{setwd()} to the current or desired folder. It has not been
  extensively tested on Windows, so please provide feedback on any other
  issues you encounter.
}

\section{Playback in experiments}{
 For triggered playback of the animation on
  a Mac I recommend Apple Quicktime Player. Playback can be started with the
  spacebar, the arrow keys allow frame-by-frame movement through the video,
  and Cmd-Left Arrow  the video to be rewound to the start. Others
  applications such as VLC have quirks, for example automatically playing the
  video on opening the file, and closing it at the end of the video. However,
  find the application that works best for your purposes. If you need to loop
  the video, many video applications have an option for that. If there is
  demand, an option may be added to create looping videos or gifs. Get in
  touch if that's something you'd like to see implemented.

  As a check, it's a good idea to ensure the application you use is correctly
  identifying the metadata of the video. This depends on the software, but in
  should be similar to the following: open the video file, pause it, make it
  fullscreen, and then:

  In Quicktime, Cmd-I or Window > Show Movie Inspector. Check 'Format'
  matches 'Current Size', and that both match your entered screen resolution
  \code{width} and \code{height}. Check 'FPS' matches the
  \code{anim_frame_rate} used to create the model in
  \code{\link{constant_speed_model}}.

  In VLC, Cmd-I or Window > Media Information, the 'Codec Details' tab. Check
  'Resolution' and 'Display Resolution' both match your entered screen
  resolution \code{width} and \code{height} (there may be small differences,
  which is ok). Check 'Frame Rate' matches the \code{anim_frame_rate} used to
  create the model in \code{\link{constant_speed_model}}. Make sure playback
  speed is at 'Normal' (Menu>Playback).
}

\section{Dependencies}{
 The function requires the following packages:
  \code{glue}, \code{plotrix}
}

\examples{
# make a looming model
loom_model <- constant_speed_model(
                     screen_distance = 20,
                     anim_frame_rate = 60,
                     speed = 500,
                     attacker_diameter = 50,
                     start_distance = 1000)

# use it to create an animation with frame numbers in top right corner
looming_animation(loom_model,
                   correction = 0.0285,
                   width = 1920,
                   height = 1080,
                   frame_number = TRUE,
                   frame_number_position = "tr",
                   frame_number_size = 2)

# pad animation with 5 seconds of the starting frame before playback
looming_animation(loom_model,
                   correction = 0.0285,
                   width = 1920,
                   height = 1080,
                   frame_number = TRUE,
                   frame_number_position = "tr",
                   frame_number_size = 2,
                   pad = 5)

}
\seealso{
\code{\link{constant_speed_model}},
  \code{\link{variable_speed_model}}, \code{\link{diameter_model}},
  \code{\link{looming_animation_calib}}
}
\author{
Nicholas Carey - \email{nicholascarey@gmail.com}
}
